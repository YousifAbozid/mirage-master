%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2370 667
%%HiResBoundingBox: 0 0 2370 666.95996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2370 666.95996 re
W
q
[0.24 0 0 -0.24 0 666.95996] cm
q
0 0 9875 2778.125 re
W*
q
[27.215401 0 0 27.214325 139.443878 189.48628] cm
49.621002 44.403999 m
49.621006 44.55534 49.613586 44.706318 49.598751 44.856934 c
49.583916 45.007549 49.561733 45.157074 49.532204 45.305508 c
49.502682 45.453945 49.465954 45.600578 49.42202 45.745403 c
49.378086 45.890228 49.32716 46.032555 49.269241 46.172375 c
49.211323 46.312202 49.146694 46.448849 49.075356 46.582321 c
49.004009 46.715794 48.926296 46.845448 48.842213 46.971283 c
48.758133 47.097126 48.668091 47.21854 48.572079 47.335529 c
48.476067 47.452518 48.374554 47.564522 48.267536 47.671535 c
48.160522 47.778553 48.048519 47.88007 47.93153 47.976082 c
47.814537 48.072094 47.693123 48.162136 47.567284 48.246216 c
47.441448 48.330299 47.311794 48.408012 47.178318 48.479355 c
47.044846 48.550701 46.908195 48.61533 46.768372 48.673244 c
46.628551 48.731163 46.486225 48.782089 46.3414 48.826019 c
46.196575 48.869953 46.049942 48.906681 45.901508 48.936203 c
45.753075 48.965733 45.603554 48.987915 45.452938 49.00275 c
45.302326 49.017586 45.151348 49.025002 45 49.025002 c
44.84866 49.025002 44.697681 49.017586 44.547066 49.00275 c
44.39645 48.987915 44.246925 48.965733 44.098484 48.936203 c
43.95005 48.906681 43.803421 48.869953 43.658592 48.826023 c
43.513767 48.782089 43.371441 48.731163 43.231613 48.673244 c
43.091793 48.61533 42.955147 48.550701 42.821674 48.479355 c
42.688202 48.408012 42.558544 48.330299 42.432705 48.246216 c
42.30687 48.162136 42.185459 48.072094 42.068466 47.976082 c
41.951477 47.88007 41.839474 47.778553 41.73246 47.671535 c
41.625446 47.564522 41.52393 47.452518 41.427917 47.335529 c
41.331905 47.21854 41.241859 47.097126 41.157776 46.971283 c
41.073696 46.845448 40.995983 46.715794 40.924641 46.582321 c
40.853298 46.448849 40.788666 46.312202 40.730747 46.172375 c
40.672836 46.032555 40.62191 45.890228 40.577976 45.745403 c
40.534042 45.600574 40.497314 45.453941 40.467785 45.305504 c
40.438263 45.15707 40.416088 45.007549 40.401253 44.856934 c
40.386421 44.706318 40.379005 44.55534 40.379002 44.403999 c
40.379005 44.252655 40.386421 44.101677 40.401257 43.951061 c
40.416092 43.800446 40.438267 43.650921 40.467789 43.502483 c
40.497318 43.35405 40.534046 43.207417 40.57798 43.062592 c
40.621914 42.917763 40.672836 42.775436 40.730755 42.635616 c
40.788673 42.495796 40.853302 42.359146 40.924644 42.22567 c
40.995987 42.092197 41.073696 41.962543 41.157776 41.836704 c
41.241859 41.710869 41.331905 41.589458 41.427917 41.472466 c
41.52393 41.355473 41.625446 41.243469 41.73246 41.136456 c
41.839474 41.029442 41.951477 40.927929 42.068466 40.831917 c
42.185459 40.735905 42.30687 40.645859 42.432705 40.561775 c
42.558544 40.477695 42.688202 40.399986 42.821674 40.328644 c
42.955147 40.257298 43.091793 40.192669 43.231613 40.13475 c
43.371441 40.076836 43.513767 40.025913 43.658592 39.981979 c
43.803417 39.938049 43.950047 39.901318 44.09848 39.871788 c
44.246922 39.842266 44.39645 39.820091 44.547066 39.805256 c
44.697681 39.790421 44.84866 39.783005 45 39.783001 c
45.151348 39.783005 45.302326 39.790421 45.452938 39.805252 c
45.603554 39.820087 45.753075 39.842266 45.901508 39.871788 c
46.049942 39.901318 46.196575 39.938049 46.3414 39.981979 c
46.486225 40.025913 46.628551 40.076836 46.768372 40.13475 c
46.908195 40.192669 47.044846 40.257298 47.178318 40.328644 c
47.311794 40.39999 47.441448 40.477699 47.567284 40.561779 c
47.693123 40.645866 47.814537 40.735912 47.931526 40.831924 c
48.048519 40.927937 48.160522 41.029446 48.267536 41.136459 c
48.374554 41.243477 48.476067 41.35548 48.572079 41.472469 c
48.668091 41.589458 48.758133 41.710873 48.842213 41.836708 c
48.926296 41.962543 49.004009 42.092201 49.075356 42.225674 c
49.146694 42.359146 49.211323 42.495796 49.269241 42.635616 c
49.32716 42.775436 49.378086 42.917763 49.42202 43.062592 c
49.465954 43.207417 49.502682 43.35405 49.532207 43.502483 c
49.561737 43.650921 49.583916 43.800446 49.598751 43.951057 c
49.613586 44.101673 49.621006 44.252655 49.621002 44.403999 c
h
f
31.559999 35.002998 m
33.692001 37.210999 36.326 38.641998 39.109001 39.289997 c
38.560001 36.485996 37.223 33.802998 35.091 31.594997 c
32.959 29.385998 30.325001 27.955997 27.542 27.306997 c
28.091 30.110001 29.427999 32.793999 31.559999 35.002998 c
h
f
35.002998 58.438999 m
37.210999 56.307999 38.641998 53.673 39.289997 50.889999 c
36.486996 51.439999 33.803997 52.778 31.594997 54.909 c
29.386997 57.042 27.954998 59.676003 27.306997 62.459 c
30.110001 61.908001 32.792999 60.571999 35.002998 58.438999 c
h
f
58.439999 54.998001 m
56.306999 52.789001 53.672997 51.358002 50.889999 50.711002 c
51.438999 53.515003 52.777 56.198002 54.909 58.405003 c
57.041 60.614002 59.676003 62.045002 62.458 62.693001 c
61.908001 59.889999 60.57 57.206001 58.439999 54.998001 c
h
f
54.999001 31.561001 m
52.789001 33.693001 51.358002 36.327 50.710999 39.110001 c
53.514 38.559002 56.196999 37.223999 58.404999 35.091 c
60.614998 32.959 62.045998 30.325001 62.693001 27.542999 c
59.889999 28.091 57.206001 29.429001 54.999001 31.561001 c
h
f
45 4.085 m
24.198999 31.710999 45 32.012001 45 32.012001 c
45 32.012001 65.801003 31.712 45 4.085 c
h
f
45 85.914001 m
65.800003 58.289001 45 57.987999 45 57.987999 c
45 57.987999 24.198999 58.289001 45 85.914001 c
h
f
4.085 45 m
31.710999 65.801003 32.012001 45 32.012001 45 c
32.012001 45 31.711 24.198999 4.085 45 c
h
f
85.915001 45 m
58.289001 24.198999 57.987999 45 57.987999 45 c
57.987999 45 58.289001 65.802002 85.915001 45 c
h
f
Q
q
[50.072456 0 0 50.070484 2997.7935 711.78058] cm
4.54 5.84 m
9.04 16.560001 l
9.12 16.560001 l
13.58 5.840001 l
16.44 5.840001 l
16.44 20 l
14.520001 20 l
14.520001 8.36 l
14.480001 8.36 l
9.700001 20 l
8.420001 20 l
3.640001 8.36 l
3.600001 8.36 l
3.600001 20 l
1.680001 20 l
1.680001 5.84 l
4.540001 5.84 l
4.54 5.84 l
h
20.52 5.8 m
20.880001 5.8 21.19002 5.93002 21.45002 6.19002 c
21.71002 6.45002 21.840019 6.76002 21.840019 7.12002 c
21.840019 7.49336 21.706678 7.8067 21.44002 8.06004 c
21.173361 8.313379 20.866699 8.44004 20.520041 8.44004 c
20.1467 8.44004 19.833361 8.313379 19.580021 8.06004 c
19.326681 7.8067 19.200022 7.49336 19.200022 7.120019 c
19.200022 6.746679 19.333363 6.43334 19.600021 6.179999 c
19.86668 5.926659 20.173342 5.799999 20.52 5.799999 c
20.52 5.8 l
h
21.42 10.520001 m
21.42 20 l
19.620001 20 l
19.620001 10.520001 l
21.42 10.520001 l
h
28.959999 10.28 m
29.293339 10.28 29.559999 10.32 29.759998 10.4 c
29.679998 12.34 l
29.333338 12.24666 29.033339 12.2 28.779999 12.2 c
27.006699 12.2 26.106598 13.18666 26.079998 15.16 c
26.079998 20 l
24.279999 20 l
24.279999 10.520001 l
26.079998 10.520001 l
26.079998 11.980001 l
26.119999 11.980001 l
26.359999 11.473341 26.746658 11.06334 27.279999 10.75 c
27.813339 10.43666 28.373299 10.28 28.959999 10.28 c
h
35.48 10.28 m
36.68 10.28 37.630001 10.55328 38.329998 11.099939 c
39.029995 11.646599 39.399998 12.406639 39.439999 13.379939 c
39.439999 18.459938 l
39.439999 18.939938 39.46666 19.453278 39.52 19.999939 c
37.920002 19.999939 l
37.880001 19.573278 37.860001 19.093279 37.860001 18.559938 c
37.82 18.559938 l
37.406658 19.173279 36.93 19.606638 36.389999 19.859938 c
35.849998 20.113237 35.220001 20.239937 34.5 20.239937 c
33.526661 20.239937 32.736702 19.979937 32.130001 19.459936 c
31.5233 18.939936 31.220001 18.253237 31.220001 17.399937 c
31.220001 16.319937 31.673342 15.503237 32.580002 14.949937 c
33.486664 14.396637 34.766602 14.119937 36.420002 14.119937 c
37.760002 14.119937 l
37.760002 13.779937 l
37.760002 13.139936 37.550003 12.636637 37.130001 12.269937 c
36.709999 11.903236 36.16 11.719936 35.48 11.719936 c
34.973339 11.719936 34.529999 11.796597 34.149998 11.949936 c
33.769997 12.103275 33.319996 12.386616 32.799999 12.799956 c
31.719999 11.679956 l
32.7467 10.773296 34 10.306657 35.48 10.279957 c
35.48 10.28 l
h
33.02 17.26 m
33.02 18.286701 33.70002 18.799999 35.060001 18.799999 c
35.873341 18.799999 36.5233 18.55666 37.010002 18.07 c
37.496704 17.58334 37.746662 16.879999 37.760002 15.96 c
37.760002 15.440001 l
36.740002 15.440001 l
35.5667 15.440001 34.6534 15.59 34 15.89 c
33.3466 16.190001 33.02 16.64666 33.02 17.26 c
h
46.419998 10.28 m
47.099998 10.28 47.733299 10.41998 48.32 10.69998 c
48.9067 10.97998 49.373299 11.37332 49.720001 11.87998 c
49.760002 11.87998 l
49.760002 10.51998 l
51.560001 10.51998 l
51.560001 19.999981 l
51.546661 21.399981 51.066662 22.546581 50.120003 23.439981 c
49.173344 24.333382 47.926601 24.786682 46.380001 24.799982 c
44.420002 24.799982 42.873402 24.233322 41.740002 23.099981 c
42.960003 21.579981 l
43.906662 22.606682 45.040001 23.11998 46.360004 23.11998 c
47.493305 23.11998 48.343304 22.829979 48.910004 22.249979 c
49.476704 21.669979 49.760002 20.879978 49.760002 19.879978 c
49.760002 18.439978 l
49.700001 18.439978 l
49.380001 18.999977 48.91666 19.419977 48.310001 19.699978 c
47.703342 19.979979 47.073303 20.119978 46.420002 20.119978 c
45.033302 20.119978 43.8866 19.656637 42.980003 18.729979 c
42.073406 17.80332 41.613304 16.659979 41.600002 15.299978 c
41.613342 13.779978 42.070004 12.566578 42.970001 11.659978 c
43.869999 10.753378 45.02 10.293278 46.420002 10.279978 c
46.419998 10.28 l
h
43.52 15.26 m
43.52 16.206661 43.796619 16.9667 44.34996 17.540001 c
44.903301 18.113302 45.66666 18.413342 46.639961 18.440001 c
47.59996 18.440001 48.356663 18.153341 48.909962 17.58 c
49.463261 17.006659 49.746643 16.233299 49.759983 15.26 c
49.759983 14.27334 49.476643 13.480001 48.909985 12.88 c
48.343327 12.28 47.579983 11.97334 46.619984 11.96 c
45.673325 11.96 44.919983 12.27334 44.359985 12.9 c
43.799988 13.526659 43.519985 14.313299 43.519985 15.26 c
43.52 15.26 l
h
58.619999 10.28 m
60.073299 10.28 61.2034 10.73664 62.009998 11.65 c
62.816597 12.563359 63.2267 13.82 63.239998 15.42 c
63.239998 15.92 l
55.639999 15.92 l
55.639999 16.69334 55.950001 17.3433 56.57 17.870001 c
57.189999 18.396702 57.946701 18.66666 58.84 18.68 c
59.82666 18.68 60.693298 18.206661 61.439999 17.26 c
62.799999 18.299999 l
61.786697 19.5933 60.3866 20.24 58.599998 20.24 c
57.146698 20.24 55.976597 19.776659 55.09 18.85 c
54.203403 17.923342 53.7467 16.726601 53.720001 15.26 c
53.720001 13.846701 54.176662 12.67 55.09 11.730001 c
56.003338 10.790001 57.18 10.306701 58.619999 10.280001 c
58.619999 10.28 l
h
61.32 14.48 m
61.293339 13.586659 61.040001 12.903299 60.560001 12.429999 c
60.080002 11.956699 59.420002 11.719999 58.580002 11.719999 c
58.02 11.719999 57.516701 11.856659 57.070004 12.129999 c
56.623306 12.403339 56.273342 12.75668 56.020004 13.189999 c
55.766666 13.623318 55.640003 14.053339 55.640003 14.479999 c
61.320004 14.479999 l
61.32 14.48 l
h
74.139999 5.84 m
78.639999 16.560001 l
78.720001 16.560001 l
83.18 5.840001 l
86.040001 5.840001 l
86.040001 20 l
84.120003 20 l
84.120003 8.36 l
84.080002 8.36 l
79.300003 20 l
78.020004 20 l
73.240005 8.36 l
73.200005 8.36 l
73.200005 20 l
71.280006 20 l
71.280006 5.84 l
74.140007 5.84 l
74.139999 5.84 l
h
92.879997 10.28 m
94.079994 10.28 95.029999 10.55328 95.729996 11.099939 c
96.429993 11.646599 96.799995 12.406639 96.839996 13.379939 c
96.839996 18.459938 l
96.839996 18.939938 96.866653 19.453278 96.919998 19.999939 c
95.32 19.999939 l
95.279999 19.573278 95.260002 19.093279 95.260002 18.559938 c
95.220001 18.559938 l
94.806664 19.173279 94.330002 19.606638 93.790001 19.859938 c
93.25 20.113237 92.620003 20.239937 91.900002 20.239937 c
90.926659 20.239937 90.136703 19.979937 89.529999 19.459936 c
88.923294 18.939936 88.619995 18.253237 88.619995 17.399937 c
88.619995 16.319937 89.073334 15.503237 89.979996 14.949937 c
90.886658 14.396637 92.166595 14.119937 93.819992 14.119937 c
95.159988 14.119937 l
95.159988 13.779937 l
95.159988 13.139936 94.949989 12.636637 94.529991 12.269937 c
94.109993 11.903236 93.55999 11.719936 92.87999 11.719936 c
92.373329 11.719936 91.929993 11.796597 91.549988 11.949936 c
91.169983 12.103275 90.719986 12.386616 90.199989 12.799956 c
89.119987 11.679956 l
90.14669 10.773296 91.399986 10.306657 92.87999 10.279957 c
92.879997 10.28 l
h
90.419998 17.26 m
90.419998 18.286701 91.100021 18.799999 92.459999 18.799999 c
93.273338 18.799999 93.923302 18.55666 94.409996 18.07 c
94.89669 17.58334 95.146652 16.879999 95.159996 15.96 c
95.159996 15.440001 l
94.139999 15.440001 l
92.966698 15.440001 92.053398 15.59 91.400002 15.89 c
90.746605 16.190001 90.419998 16.64666 90.419998 17.26 c
h
102.660004 10.28 m
103.380005 10.28 104.0233 10.41338 104.590004 10.680039 c
105.156708 10.946699 105.593307 11.33336 105.900002 11.840039 c
104.5 12.90004 l
103.96666 12.273379 103.32 11.960039 102.559998 11.960039 c
102.106659 11.960039 101.729996 12.06004 101.43 12.260039 c
101.130005 12.460039 100.980003 12.713379 100.980003 13.02004 c
100.980003 13.6867 101.600006 14.140039 102.840004 14.380039 c
104.053307 14.606699 104.910004 14.94004 105.410004 15.380039 c
105.910004 15.820039 106.160004 16.446739 106.160004 17.260038 c
106.160004 18.180038 105.810005 18.903339 105.110001 19.430038 c
104.409996 19.956738 103.473297 20.226698 102.300003 20.240038 c
101.420006 20.240038 100.696701 20.103378 100.130005 19.830038 c
99.563309 19.556698 99.073303 19.133358 98.660004 18.560038 c
100.020004 17.440037 l
100.740005 18.186697 101.506706 18.560038 102.320007 18.560038 c
102.853348 18.560038 103.306686 18.453377 103.680008 18.240038 c
104.053329 18.026699 104.240005 17.733358 104.240005 17.360018 c
104.240005 16.706678 103.640007 16.253319 102.440002 16.000017 c
101.106705 15.733357 100.209999 15.376698 99.75 14.930018 c
99.290001 14.483337 99.059998 13.906717 99.059998 13.200018 c
99.059998 12.320018 99.399994 11.616718 100.079994 11.090018 c
100.759995 10.563318 101.619995 10.293358 102.659996 10.280018 c
102.660004 10.28 l
h
110.839996 7.86 m
110.839973 10.520001 l
113.419975 10.520001 l
113.419975 12.08 l
110.839973 12.08 l
110.839973 16.639999 l
110.839973 17.25334 110.926636 17.7267 111.099976 18.059999 c
111.273315 18.393299 111.639977 18.559999 112.199974 18.559999 c
112.733315 18.559999 113.159973 18.46666 113.479973 18.279999 c
113.479973 19.919998 l
113.133316 20.106659 112.586655 20.213318 111.839973 20.239979 c
111.119972 20.239979 110.563271 20.129978 110.169975 19.909979 c
109.77668 19.68998 109.489975 19.38332 109.309975 18.989979 c
109.129974 18.596638 109.039978 17.979979 109.039978 17.139978 c
109.039978 12.079979 l
106.959976 12.079979 l
106.959976 10.51998 l
109.039978 10.51998 l
109.039978 7.85998 l
110.839981 7.85998 l
110.839996 7.86 l
h
120.080002 10.28 m
121.533302 10.28 122.663399 10.73664 123.470001 11.65 c
124.276604 12.563359 124.686699 13.82 124.700005 15.42 c
124.700005 15.92 l
117.100006 15.92 l
117.100006 16.69334 117.410004 17.3433 118.030006 17.870001 c
118.650009 18.396702 119.406708 18.66666 120.300003 18.68 c
121.286667 18.68 122.153305 18.206661 122.900002 17.26 c
124.260002 18.299999 l
123.246704 19.5933 121.846603 20.24 120.060005 20.24 c
118.606705 20.24 117.436607 19.776659 116.550003 18.85 c
115.663399 17.923342 115.206703 16.726601 115.18 15.26 c
115.18 13.846701 115.636658 12.67 116.550003 11.730001 c
117.463348 10.790001 118.639999 10.306701 120.080002 10.280001 c
120.080002 10.28 l
h
122.779999 14.48 m
122.753342 13.586659 122.5 12.903299 122.019997 12.429999 c
121.539993 11.956699 120.879997 11.719999 120.039993 11.719999 c
119.479996 11.719999 118.976692 11.856659 118.529991 12.129999 c
118.08329 12.403339 117.73333 12.75668 117.479988 13.189999 c
117.226646 13.623318 117.099991 14.053339 117.099991 14.479999 c
122.779991 14.479999 l
122.779999 14.48 l
h
131.539993 10.28 m
131.873337 10.28 132.139999 10.32 132.339996 10.4 c
132.259995 12.34 l
131.91333 12.24666 131.613327 12.2 131.360001 12.2 c
129.5867 12.2 128.6866 13.18666 128.660004 15.16 c
128.660004 20 l
126.860001 20 l
126.860001 10.520001 l
128.660004 10.520001 l
128.660004 11.980001 l
128.699997 11.980001 l
128.940002 11.473341 129.32666 11.06334 129.860001 10.75 c
130.393341 10.43666 130.953308 10.28 131.539993 10.28 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
